{"version":3,"sources":["utils/api.js","components/employeeCard.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeCard","props","className","src","alt","firstName","lastName","email","phone","SearchBar","tempArray","location","useLocation","to","pathname","App","useState","employees","setEmployees","useEffect","API","then","res","data","results","catch","error","console","log","getGender","gender","filter","employee","exact","path","component","map","key","name","first","last","picture","medium","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fa5905af.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getEmployees: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./employeeCard.css\"\r\n\r\n//Passing in the data into the component using props\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"employeeCard row\">\r\n        <span className=\"col-lg-3 col-md-6\">\r\n          <img src={props.src} alt={props.firstName}></img>\r\n        </span>\r\n        <p className=\"col-lg-3 col-md-6\">\r\n          <span className=\"employeeInfo\">\r\n            {props.firstName} {props.lastName}\r\n          </span>\r\n        </p>\r\n        <p className=\"col-lg-3 col-md-6\">\r\n          <span className=\"employeeInfo\">{props.email}</span>\r\n        </p>\r\n        <p className=\"col-lg-3 col-md-6\">\r\n          <span className=\"employeeInfo\">{props.phone}</span>\r\n        </p>\r\n      </div>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n\r\n","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport  \"./SearchBar.css\";\r\n\r\nfunction SearchBar() {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"container d-flex justify-content-around flex-wrap\">\r\n        <Link to=\"/\">\r\n          <button\r\n            className={\r\n              location.pathname === \"/\" ? \"btn btn-light\" : \"btn btn-dark\"\r\n            }\r\n          >\r\n            All Employees\r\n          </button>\r\n        </Link>\r\n        <Link to=\"/employees/male\">\r\n          <button\r\n            className={\r\n              location.pathname === \"/employees/male\"\r\n                ? \"btn btn-light\"\r\n                : \"btn btn-dark\"\r\n            }\r\n          >\r\n            Men Only\r\n          </button>\r\n        </Link>\r\n        <Link to=\"/employees/female\">\r\n          <button\r\n            className={\r\n              location.pathname === \"/employees/female\"\r\n                ? \"btn btn-light\"\r\n                : \"btn btn-dark\"\r\n            }\r\n          >\r\n            Woman Only\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport API from \"./utils/api\";\nimport EmployeeCard from \"./components/employeeCard\";\nimport SearchBar from \"./components/SearchBar\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n//Holds the newly fetched data for storing it inot the employee list using set state\nvar tempArray;\n\nfunction App () {\n\n  const [employees, setEmployees] = useState([]);\n\n\n  useEffect(() => {\n\n    API.getEmployees()\n      .then((res) => (tempArray = res.data.results))\n      .then(() => setEmployees(tempArray))\n      .catch((error) => console.log(error));\n  }, [])\n\n  const getGender = (gender) => {\n    return tempArray.filter((employee) => employee.gender === gender);\n  };\n\n  const searchMales = () =>\n    getGender(\"male\").map((employee) => (\n      <EmployeeCard\n        key={employee.name.first + employee.name.last}\n        firstName={employee.name.first}\n        lastName={employee.name.last}\n        email={employee.email}\n        phone={employee.phone}\n        src={employee.picture.medium}\n      />\n    ));\n\n    const searchFemales = () =>\n      getGender(\"female\").map((employee) => (\n        <EmployeeCard\n          key={employee.name.first + employee.name.last}\n          firstName={employee.name.first}\n          lastName={employee.name.last}\n          email={employee.email}\n          phone={employee.phone}\n          src={employee.picture.medium}\n        />\n      ));\n\n      const emptySearch = () =>\n        employees.map((employee) => (\n          <EmployeeCard\n            key={employee.name.first + employee.name.last}\n            firstName={employee.name.first}\n            lastName={employee.name.last}\n            email={employee.email}\n            phone={employee.phone}\n            src={employee.picture.medium}\n          />\n        ));\n\n\n \n    return (\n      <Router>\n        <h1> Welcome to The Employee Directory</h1>\n        <SearchBar />\n\n        <Route exact path=\"/\" component={emptySearch}/>\n        <Route exact path=\"/employees/male\" component={searchMales}/>\n        <Route exact path=\"/employees/female\" component={searchFemales} />\n\n      </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}